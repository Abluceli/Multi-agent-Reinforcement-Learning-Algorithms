# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CEnvRescue')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CEnvRescue')
    _CEnvRescue = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CEnvRescue', [dirname(__file__)])
        except ImportError:
            import _CEnvRescue
            return _CEnvRescue
        try:
            _mod = imp.load_module('_CEnvRescue', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CEnvRescue = swig_import_helper()
    del swig_import_helper
else:
    import _CEnvRescue
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CEnvRescue.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _CEnvRescue.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CEnvRescue.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CEnvRescue.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CEnvRescue.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CEnvRescue.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CEnvRescue.SwigPyIterator_copy(self)

    def next(self):
        return _CEnvRescue.SwigPyIterator_next(self)

    def __next__(self):
        return _CEnvRescue.SwigPyIterator___next__(self)

    def previous(self):
        return _CEnvRescue.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CEnvRescue.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CEnvRescue.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CEnvRescue.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CEnvRescue.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CEnvRescue.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CEnvRescue.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CEnvRescue.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _CEnvRescue.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CEnvRescue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CEnvRescue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CEnvRescue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _CEnvRescue.new_CEnvRescue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CEnvRescue.delete_CEnvRescue
    __del__ = lambda self: None

    def step(self, id):
        return _CEnvRescue.CEnvRescue_step(self, id)

    def get_obs(self, id, index):
        return _CEnvRescue.CEnvRescue_get_obs(self, id, index)

    def init_obs(self, id):
        return _CEnvRescue.CEnvRescue_init_obs(self, id)

    def get_global_obs(self, index):
        return _CEnvRescue.CEnvRescue_get_global_obs(self, index)

    def init_global_obs(self):
        return _CEnvRescue.CEnvRescue_init_global_obs(self)

    def reset(self):
        return _CEnvRescue.CEnvRescue_reset(self)

    def get_agt_x(self, id):
        return _CEnvRescue.CEnvRescue_get_agt_x(self, id)

    def get_agt_y(self, id):
        return _CEnvRescue.CEnvRescue_get_agt_y(self, id)

    def get_agt_last_x(self, id):
        return _CEnvRescue.CEnvRescue_get_agt_last_x(self, id)

    def get_agt_last_y(self, id):
        return _CEnvRescue.CEnvRescue_get_agt_last_y(self, id)

    def get_agt_ori(self, id):
        return _CEnvRescue.CEnvRescue_get_agt_ori(self, id)

    def get_human_x(self, id):
        return _CEnvRescue.CEnvRescue_get_human_x(self, id)

    def get_human_y(self, id):
        return _CEnvRescue.CEnvRescue_get_human_y(self, id)

    def get_carry_human_id(self, agt_id):
        return _CEnvRescue.CEnvRescue_get_carry_human_id(self, agt_id)

    def get_human_picked_by(self, human_id):
        return _CEnvRescue.CEnvRescue_get_human_picked_by(self, human_id)

    def is_pos_free(self, x, y):
        return _CEnvRescue.CEnvRescue_is_pos_free(self, x, y)
    __swig_setmethods__["map"] = _CEnvRescue.CEnvRescue_map_set
    __swig_getmethods__["map"] = _CEnvRescue.CEnvRescue_map_get
    if _newclass:
        map = _swig_property(_CEnvRescue.CEnvRescue_map_get, _CEnvRescue.CEnvRescue_map_set)
    __swig_setmethods__["N_agent"] = _CEnvRescue.CEnvRescue_N_agent_set
    __swig_getmethods__["N_agent"] = _CEnvRescue.CEnvRescue_N_agent_get
    if _newclass:
        N_agent = _swig_property(_CEnvRescue.CEnvRescue_N_agent_get, _CEnvRescue.CEnvRescue_N_agent_set)
    __swig_setmethods__["N_human"] = _CEnvRescue.CEnvRescue_N_human_set
    __swig_getmethods__["N_human"] = _CEnvRescue.CEnvRescue_N_human_get
    if _newclass:
        N_human = _swig_property(_CEnvRescue.CEnvRescue_N_human_get, _CEnvRescue.CEnvRescue_N_human_set)
    __swig_setmethods__["agent_list"] = _CEnvRescue.CEnvRescue_agent_list_set
    __swig_getmethods__["agent_list"] = _CEnvRescue.CEnvRescue_agent_list_get
    if _newclass:
        agent_list = _swig_property(_CEnvRescue.CEnvRescue_agent_list_get, _CEnvRescue.CEnvRescue_agent_list_set)
    __swig_setmethods__["human_list"] = _CEnvRescue.CEnvRescue_human_list_set
    __swig_getmethods__["human_list"] = _CEnvRescue.CEnvRescue_human_list_get
    if _newclass:
        human_list = _swig_property(_CEnvRescue.CEnvRescue_human_list_get, _CEnvRescue.CEnvRescue_human_list_set)
    __swig_setmethods__["obs_size"] = _CEnvRescue.CEnvRescue_obs_size_set
    __swig_getmethods__["obs_size"] = _CEnvRescue.CEnvRescue_obs_size_get
    if _newclass:
        obs_size = _swig_property(_CEnvRescue.CEnvRescue_obs_size_get, _CEnvRescue.CEnvRescue_obs_size_set)
    __swig_setmethods__["obs"] = _CEnvRescue.CEnvRescue_obs_set
    __swig_getmethods__["obs"] = _CEnvRescue.CEnvRescue_obs_get
    if _newclass:
        obs = _swig_property(_CEnvRescue.CEnvRescue_obs_get, _CEnvRescue.CEnvRescue_obs_set)
    __swig_setmethods__["global_obs"] = _CEnvRescue.CEnvRescue_global_obs_set
    __swig_getmethods__["global_obs"] = _CEnvRescue.CEnvRescue_global_obs_get
    if _newclass:
        global_obs = _swig_property(_CEnvRescue.CEnvRescue_global_obs_get, _CEnvRescue.CEnvRescue_global_obs_set)
    __swig_setmethods__["edge_blk_num"] = _CEnvRescue.CEnvRescue_edge_blk_num_set
    __swig_getmethods__["edge_blk_num"] = _CEnvRescue.CEnvRescue_edge_blk_num_get
    if _newclass:
        edge_blk_num = _swig_property(_CEnvRescue.CEnvRescue_edge_blk_num_get, _CEnvRescue.CEnvRescue_edge_blk_num_set)
    __swig_setmethods__["global_obs_list"] = _CEnvRescue.CEnvRescue_global_obs_list_set
    __swig_getmethods__["global_obs_list"] = _CEnvRescue.CEnvRescue_global_obs_list_get
    if _newclass:
        global_obs_list = _swig_property(_CEnvRescue.CEnvRescue_global_obs_list_get, _CEnvRescue.CEnvRescue_global_obs_list_set)
    __swig_setmethods__["d_x"] = _CEnvRescue.CEnvRescue_d_x_set
    __swig_getmethods__["d_x"] = _CEnvRescue.CEnvRescue_d_x_get
    if _newclass:
        d_x = _swig_property(_CEnvRescue.CEnvRescue_d_x_get, _CEnvRescue.CEnvRescue_d_x_set)
    __swig_setmethods__["d_y"] = _CEnvRescue.CEnvRescue_d_y_set
    __swig_getmethods__["d_y"] = _CEnvRescue.CEnvRescue_d_y_get
    if _newclass:
        d_y = _swig_property(_CEnvRescue.CEnvRescue_d_y_get, _CEnvRescue.CEnvRescue_d_y_set)
    __swig_setmethods__["omega"] = _CEnvRescue.CEnvRescue_omega_set
    __swig_getmethods__["omega"] = _CEnvRescue.CEnvRescue_omega_get
    if _newclass:
        omega = _swig_property(_CEnvRescue.CEnvRescue_omega_get, _CEnvRescue.CEnvRescue_omega_set)
    __swig_setmethods__["if_pick"] = _CEnvRescue.CEnvRescue_if_pick_set
    __swig_getmethods__["if_pick"] = _CEnvRescue.CEnvRescue_if_pick_get
    if _newclass:
        if_pick = _swig_property(_CEnvRescue.CEnvRescue_if_pick_get, _CEnvRescue.CEnvRescue_if_pick_set)
    __swig_setmethods__["x"] = _CEnvRescue.CEnvRescue_x_set
    __swig_getmethods__["x"] = _CEnvRescue.CEnvRescue_x_get
    if _newclass:
        x = _swig_property(_CEnvRescue.CEnvRescue_x_get, _CEnvRescue.CEnvRescue_x_set)
    __swig_setmethods__["y"] = _CEnvRescue.CEnvRescue_y_set
    __swig_getmethods__["y"] = _CEnvRescue.CEnvRescue_y_get
    if _newclass:
        y = _swig_property(_CEnvRescue.CEnvRescue_y_get, _CEnvRescue.CEnvRescue_y_set)
    __swig_setmethods__["ori"] = _CEnvRescue.CEnvRescue_ori_set
    __swig_getmethods__["ori"] = _CEnvRescue.CEnvRescue_ori_get
    if _newclass:
        ori = _swig_property(_CEnvRescue.CEnvRescue_ori_get, _CEnvRescue.CEnvRescue_ori_set)
    __swig_setmethods__["last_x"] = _CEnvRescue.CEnvRescue_last_x_set
    __swig_getmethods__["last_x"] = _CEnvRescue.CEnvRescue_last_x_get
    if _newclass:
        last_x = _swig_property(_CEnvRescue.CEnvRescue_last_x_get, _CEnvRescue.CEnvRescue_last_x_set)
    __swig_setmethods__["last_y"] = _CEnvRescue.CEnvRescue_last_y_set
    __swig_getmethods__["last_y"] = _CEnvRescue.CEnvRescue_last_y_get
    if _newclass:
        last_y = _swig_property(_CEnvRescue.CEnvRescue_last_y_get, _CEnvRescue.CEnvRescue_last_y_set)
    __swig_setmethods__["carry_human_id"] = _CEnvRescue.CEnvRescue_carry_human_id_set
    __swig_getmethods__["carry_human_id"] = _CEnvRescue.CEnvRescue_carry_human_id_get
    if _newclass:
        carry_human_id = _swig_property(_CEnvRescue.CEnvRescue_carry_human_id_get, _CEnvRescue.CEnvRescue_carry_human_id_set)
    __swig_setmethods__["picked_by"] = _CEnvRescue.CEnvRescue_picked_by_set
    __swig_getmethods__["picked_by"] = _CEnvRescue.CEnvRescue_picked_by_get
    if _newclass:
        picked_by = _swig_property(_CEnvRescue.CEnvRescue_picked_by_get, _CEnvRescue.CEnvRescue_picked_by_set)
    __swig_setmethods__["is_free"] = _CEnvRescue.CEnvRescue_is_free_set
    __swig_getmethods__["is_free"] = _CEnvRescue.CEnvRescue_is_free_get
    if _newclass:
        is_free = _swig_property(_CEnvRescue.CEnvRescue_is_free_get, _CEnvRescue.CEnvRescue_is_free_set)
CEnvRescue_swigregister = _CEnvRescue.CEnvRescue_swigregister
CEnvRescue_swigregister(CEnvRescue)

# This file is compatible with both classic and new-style classes.


